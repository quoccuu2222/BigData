import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from xgboost import XGBClassifier
from sklearn.metrics import classification_report
import joblib
import glob
import time

start = time.time()
print("üöÄ Hu·∫•n luy·ªán m√¥ h√¨nh D·ª∞ ƒêO√ÅN NGUY√äN NH√ÇN...")

# 1Ô∏è‚É£ ƒê·ªçc d·ªØ li·ªáu (2002‚Äì2008)
files = sorted(glob.glob("data/*.csv"))
selected_files = [f for f in files if any(str(y) in f for y in range(2002, 2009))]

dfs = []
for f in selected_files:
    print(f"üì• ƒê·ªçc {f} ...")
    try:
        df_temp = pd.read_csv(f, nrows=1_000_000, low_memory=False, encoding='utf-8')
    except UnicodeDecodeError:
        df_temp = pd.read_csv(f, nrows=1_000_000, low_memory=False, encoding='latin1')
    dfs.append(df_temp)

df = pd.concat(dfs, ignore_index=True)
print("‚úÖ D·ªØ li·ªáu t·ªïng h·ª£p:", df.shape)

# 2Ô∏è‚É£ Gi·ªØ c√°c chuy·∫øn bay b·ªã delay
cols = [
    "Month","DayofMonth","DayOfWeek","TaxiOut","Distance",
    "CarrierDelay","WeatherDelay","NASDelay","SecurityDelay","LateAircraftDelay"
]
df = df[cols].dropna()

# 3Ô∏è‚É£ T·∫°o nh√£n nguy√™n nh√¢n ch√≠nh (delay l·ªõn nh·∫•t)
df["MainCause"] = df[
    ["CarrierDelay","WeatherDelay","NASDelay","SecurityDelay","LateAircraftDelay"]
].idxmax(axis=1)

# 4Ô∏è‚É£ M√£ h√≥a nh√£n
label_encoder = LabelEncoder()
df["MainCauseCode"] = label_encoder.fit_transform(df["MainCause"])
joblib.dump(label_encoder, "label_encoder.pkl")

# 5Ô∏è‚É£ Chu·∫©n b·ªã d·ªØ li·ªáu train/test
X = df[["Month","DayofMonth","DayOfWeek","TaxiOut","Distance"]]
y = df["MainCauseCode"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 6Ô∏è‚É£ Hu·∫•n luy·ªán m√¥ h√¨nh ‚Äî t·ª± ƒë·ªông ch·ªçn GPU n·∫øu c√≥
try:
    model = XGBClassifier(
        tree_method="gpu_hist",  # GPU tƒÉng t·ªëc
        device="cuda",
        n_estimators=250,
        max_depth=8,
        learning_rate=0.05,
        subsample=0.8,
        colsample_bytree=0.8,
        eval_metric="mlogloss"
    )
    print("‚ö° GPU kh·∫£ d·ª•ng ‚Äî ƒëang hu·∫•n luy·ªán b·∫±ng GPU.")
    model.fit(X_train, y_train)
except Exception as e:
    print(f"üíª GPU kh√¥ng kh·∫£ d·ª•ng ({e}). Chuy·ªÉn sang CPU ...")
    model = XGBClassifier(
        tree_method="hist",  # CPU fallback
        device="cpu",
        n_estimators=250,
        max_depth=8,
        learning_rate=0.05,
        subsample=0.8,
        colsample_bytree=0.8,
        eval_metric="mlogloss"
    )
    model.fit(X_train, y_train)

# 7Ô∏è‚É£ ƒê√°nh gi√°
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred, target_names=label_encoder.classes_))

# 8Ô∏è‚É£ L∆∞u m√¥ h√¨nh
model.save_model("flight_cause_model.json")

end = time.time()
print(f"üíæ Hu·∫•n luy·ªán xong! ‚è±Ô∏è {(end - start)/60:.2f} ph√∫t")
